{"ast":null,"code":"var _jsxFileName = \"/home/matias/git/unq-ui-matias-cardozo-trabajo-final/src/components/SinglePlayer.js\";\nimport React, { useState } from 'react'; //importo iconos \n\nimport Piedra from \"../icons/piedra.svg\";\nimport Papel from \"../icons/papel.svg\";\nimport Tijeras from \"../icons/tijeras.svg\";\nimport Lagarto from \"../icons/lagarto.svg\";\nimport Spock from \"../icons/spock.svg\";\nimport Player from '../components/Player';\nimport Verificador from '../System';\nimport '../styles/SinglePlayer.css';\n\nfunction SinglePlayer() {\n  //Jugador\n  const [eleccionJugador, setEleccionjugador] = useState('');\n  const [ganadasJugador, setGanadasJugador] = useState(0);\n  const [juegoTerminado, setJuegoTerminado] = useState(false); //CPU\n\n  const iconosPosibles = [Piedra, Papel, Tijeras, Lagarto, Spock];\n  const [iconoRandom, setIconoRandom] = useState('');\n  const eleccionesPosibles = ['Piedra', 'Papel', 'Tijera', 'Lagarto', 'Spock'];\n  const [ganadasCPU, setGanadasCPU] = useState(0);\n  const [ganadorDeRonda, setGanadorDeRonda] = useState('');\n\n  function jugar(opcJug1) {\n    if (!juegoTerminado && opcJug1 !== '') {\n      //Seteo una eleccion random para el cpu\n      var valorRandom = Math.floor(Math.random() * eleccionesPosibles.length);\n      var eleccionRandom = eleccionesPosibles[valorRandom];\n      setIconoRandom(iconosPosibles[valorRandom]);\n      var ganador = Verificador(opcJug1, eleccionRandom);\n\n      if (ganador === 'jug1') {\n        setGanadasJugador(ganadasJugador + 1);\n        setGanadorDeRonda('Ganador Jugador 1');\n      }\n\n      if (ganador === 'jug2') {\n        setGanadasCPU(ganadasCPU + 1);\n        setGanadorDeRonda('Ganador CPU');\n      }\n\n      if (ganador === 'empate') {\n        setGanadorDeRonda('Empate');\n      }\n\n      console.log(ganador);\n      setJuegoTerminado(true);\n    }\n  }\n\n  function reset() {\n    setEleccionjugador('');\n    setIconoRandom(null);\n    setJuegoTerminado(false);\n    setGanadorDeRonda('');\n  }\n\n  const verEleccion = eleccion => {\n    if (!juegoTerminado) {\n      setEleccionjugador(eleccion);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"body-singleplayer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Player, {\n    verEleccion: verEleccion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"datos-jugador\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, \"Ganadas: \", ganadasJugador), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, \"Elegiste: \", eleccionJugador)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"botones-jugar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"boton\",\n    type: \"button\",\n    onClick: () => jugar(eleccionJugador),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, \"Jugar\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"boton\",\n    type: \"button\",\n    onClick: () => reset(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, \"Jugar de Nuevo\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"datos-cpu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"datos-cpu-texto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, \"El CPU eligi\\xF3 : \"), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"datos-cpu-texto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, \"Ganadas CPU: \", ganadasCPU), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"iconoSeleccionCpu\",\n    src: iconoRandom,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"resultado\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, \"Resultado final: \", ganadorDeRonda));\n}\n\nexport default SinglePlayer;","map":{"version":3,"sources":["/home/matias/git/unq-ui-matias-cardozo-trabajo-final/src/components/SinglePlayer.js"],"names":["React","useState","Player","Verificador","SinglePlayer","eleccionJugador","setEleccionjugador","ganadasJugador","setGanadasJugador","juegoTerminado","setJuegoTerminado","iconosPosibles","Piedra","Papel","Tijeras","Lagarto","Spock","iconoRandom","setIconoRandom","eleccionesPosibles","ganadasCPU","setGanadasCPU","ganadorDeRonda","setGanadorDeRonda","jugar","opcJug1","valorRandom","Math","floor","random","length","eleccionRandom","ganador","console","log","reset","verEleccion","eleccion"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\n//importo iconos \nimport Piedra from '../icons/piedra.svg'\nimport Papel from '../icons/papel.svg'\nimport Tijeras from '../icons/tijeras.svg'\nimport Lagarto from '../icons/lagarto.svg'\nimport Spock from '../icons/spock.svg'\n\n\nimport Player from '../components/Player'\nimport Verificador from '../System'\n\nimport '../styles/SinglePlayer.css'\n\nfunction SinglePlayer(){\n\n    //Jugador\n    const [eleccionJugador, setEleccionjugador]= useState('');\n    const [ganadasJugador, setGanadasJugador]= useState(0);\n    const [juegoTerminado, setJuegoTerminado]= useState(false);\n\n    //CPU\n    const iconosPosibles= [Piedra, Papel, Tijeras, Lagarto, Spock];\n    const [iconoRandom, setIconoRandom]= useState('');\n    const eleccionesPosibles = ['Piedra', 'Papel', 'Tijera', 'Lagarto', 'Spock'];\n    \n    const [ganadasCPU, setGanadasCPU]= useState(0);\n\n    const [ganadorDeRonda, setGanadorDeRonda]= useState('');\n    \n\n    \n    function jugar(opcJug1){\n        if(!juegoTerminado && opcJug1 !==''){\n            //Seteo una eleccion random para el cpu\n            var valorRandom = Math.floor(Math.random() * eleccionesPosibles.length);\n            var eleccionRandom = eleccionesPosibles[valorRandom];\n            \n            setIconoRandom(iconosPosibles[valorRandom])\n            \n            \n            var ganador =Verificador(opcJug1, eleccionRandom);\n            if (ganador ==='jug1'){\n                setGanadasJugador(ganadasJugador+1)\n                setGanadorDeRonda('Ganador Jugador 1')\n            }\n            if(ganador==='jug2'){\n                setGanadasCPU(ganadasCPU+1)\n                setGanadorDeRonda('Ganador CPU')\n            }\n            if(ganador === 'empate'){\n                setGanadorDeRonda('Empate')\n            }\n            console.log(ganador)\n            setJuegoTerminado(true)\n        }\n        \n        \n    }\n\n    function reset(){\n        setEleccionjugador('');\n        setIconoRandom(null);\n        setJuegoTerminado(false);\n        setGanadorDeRonda('');\n    }\n\n\n    const verEleccion = eleccion =>{\n        if(!juegoTerminado){\n            setEleccionjugador(eleccion)\n        }\n    }\n\n    return(\n        <div className=\"body-singleplayer\">\n            <Player verEleccion={verEleccion}/>\n            <div className=\"datos-jugador\">\n                <h3>Ganadas: {ganadasJugador}</h3>\n                <h2>Elegiste: {eleccionJugador}</h2>\n            </div>\n            <div className=\"botones-jugar\">\n                <button className=\"boton\" type=\"button\" onClick={() => jugar(eleccionJugador)}>Jugar</button>\n                <button className=\"boton\" type=\"button\" onClick={()=>reset()} >Jugar de Nuevo</button>\n            </div>\n            <div className=\"datos-cpu\">\n                <h2 className=\"datos-cpu-texto\">El CPU eligió : </h2>\n                <h3 className=\"datos-cpu-texto\">Ganadas CPU: {ganadasCPU}</h3>\n                <img className=\"iconoSeleccionCpu\" src={iconoRandom} alt='' />\n            </div>\n                <h1 className=\"resultado\">Resultado final: {ganadorDeRonda}</h1>\n            \n        </div>\n    )\n}\n\nexport default SinglePlayer;"]},"metadata":{},"sourceType":"module"}