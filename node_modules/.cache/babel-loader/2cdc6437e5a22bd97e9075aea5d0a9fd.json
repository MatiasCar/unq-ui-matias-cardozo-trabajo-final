{"ast":null,"code":"var _jsxFileName = \"/home/matias/git/unq-ui-matias-cardozo-trabajo-final/src/components/SinglePlayer.js\";\nimport React, { useState } from 'react'; //importo iconos \n\nimport Piedra from \"../icons/piedra.svg\";\nimport Papel from \"../icons/papel.svg\";\nimport Tijeras from \"../icons/tijeras.svg\";\nimport Lagarto from \"../icons/lagarto.svg\";\nimport Spock from \"../icons/spock.svg\";\nimport Player from '../components/Player';\nimport '../styles/SinglePlayer.css';\n\nfunction SinglePlayer() {\n  //Jugador\n  const [eleccionJugador, setEleccionjugador] = useState('');\n  const [ganadasJugador, setGanadasJugador] = useState(0);\n  const [juegoTerminado, setJuegoTerminado] = useState(false); //CPU\n\n  const iconosPosibles = [Piedra, Papel, Tijeras, Lagarto, Spock];\n  const [iconoRandom, setIconoRandom] = useState(null);\n  const eleccionesPosibles = ['Piedra', 'Papel', 'Tijera', 'Lagarto', 'Spock'];\n  const [eleccionCpu, setEleccionCPU] = useState('');\n  const [ganadasCPU, setGanadasCPU] = useState(0);\n  const [ganadorDeRonda, setGanadorDeRonda] = useState('');\n\n  function verificarGanador(opcJug1, opcCPU) {\n    var rta = ''; //Casos para eleccion 'Piedra' del jugador\n\n    if (opcJug1 === 'Piedra') {\n      //gana contra:\n      if (opcCPU === 'Tijera' || opcCPU === 'Lagarto') {\n        rta = 'jug1';\n      } //pierde contra:\n\n\n      if (opcCPU === 'Papel' || opcCPU === 'Spock') {\n        rta = 'jug2';\n      }\n\n      if (opcCPU === 'Piedra') {\n        rta = 'empate';\n      }\n\n      return rta;\n    } //Casos para eleccion 'Papel' del jugador\n\n\n    if (opcJug1 === 'Papel') {\n      //gana contra:\n      if (opcCPU === 'Piedra' || opcCPU === 'Spock') {\n        rta = 'jug1';\n      } //pierde contra:\n\n\n      if (opcCPU === 'Tijera' || opcCPU === 'Lagarto') {\n        rta = 'jug2';\n      }\n\n      if (opcCPU === 'Papel') {\n        rta = 'empate';\n      }\n\n      return rta;\n    } //Casos para eleccion 'Tijera' del jugador\n\n\n    if (opcJug1 === 'Tijera') {\n      //gana contra:\n      if (opcCPU === 'Papel' || opcCPU === 'Lagarto') {\n        rta = 'jug1';\n      } //pierde contra:\n\n\n      if (opcCPU === 'Piedra' || opcCPU === 'Spock') {\n        rta = 'jug2';\n      }\n\n      if (opcCPU === 'Tijera') {\n        rta = 'empate';\n      }\n\n      return rta;\n    } //Casos para eleccion 'Lagarto' del jugador\n\n\n    if (opcJug1 === 'Lagarto') {\n      //gana contra:\n      if (opcCPU === 'Papel' || opcCPU === 'Spock') {\n        rta = 'jug1';\n      } //pierde contra:\n\n\n      if (opcCPU === 'Piedra' || opcCPU === 'Tijera') {\n        rta = 'jug2';\n      }\n\n      if (opcCPU === 'Lagarto') {\n        rta = 'empate';\n      }\n\n      return rta;\n    } //Casos para eleccion 'Spock' del jugador\n\n\n    if (opcJug1 === 'Spock') {\n      //gana contra:\n      if (opcCPU === 'Tijera' || opcCPU === 'Piedra') {\n        rta = 'jug1';\n      } //pierde contra:\n\n\n      if (opcCPU === 'Lagarto' || opcCPU === 'Papel') {\n        rta = 'jug2';\n      }\n\n      if (opcCPU === 'Spock') {\n        rta = 'empate';\n      }\n\n      return rta;\n    }\n  }\n\n  function jugar(opcJug1) {\n    if (!juegoTerminado && opcJug1 !== '') {\n      //Seteo una eleccion random para el cpu\n      var valorRandom = Math.floor(Math.random() * eleccionesPosibles.length);\n      var eleccionRandom = eleccionesPosibles[valorRandom];\n      setEleccionCPU(eleccionRandom);\n      setIconoRandom(iconosPosibles[valorRandom]);\n      var ganador = verificarGanador(opcJug1, eleccionRandom);\n\n      if (ganador === 'jug1') {\n        setGanadasJugador(ganadasJugador + 1);\n        setGanadorDeRonda('Ganador Jugador 1');\n      }\n\n      if (ganador === 'jug2') {\n        setGanadasCPU(ganadasCPU + 1);\n        setGanadorDeRonda('Ganador CPU');\n      }\n\n      if (ganador === 'empate') {\n        setGanadorDeRonda('Empate');\n      }\n\n      console.log(ganador);\n      setJuegoTerminado(true);\n    } else {//tirar error\n    }\n  }\n\n  function reset() {\n    setEleccionjugador('');\n    setEleccionCPU('');\n    setJuegoTerminado(false);\n    setGanadorDeRonda('');\n  }\n\n  const verEleccion = eleccion => {\n    if (!juegoTerminado) {\n      setEleccionjugador(eleccion);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Player, {\n    verEleccion: verEleccion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"datos-jugador\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  }, \"Ganadas: \", ganadasJugador), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 17\n    }\n  }, \"Elegiste: \", eleccionJugador)), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"boton-jugar\",\n    type: \"button\",\n    onClick: () => jugar(eleccionJugador),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, \"Jugar\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"boton-jugar\",\n    type: \"button\",\n    onClick: () => reset(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, \"Jugar de Nuevo\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"datos-cpu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 17\n    }\n  }, \"El CPU eligi\\xF3 : \", /*#__PURE__*/React.createElement(\"img\", {\n    className: \"iconoSeleccionCpu\",\n    src: iconoRandom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }\n  }, \"Ganadas CPU: \", ganadasCPU)), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }\n  }, \"Resultado final: \", ganadorDeRonda));\n}\n\nexport default SinglePlayer;","map":{"version":3,"sources":["/home/matias/git/unq-ui-matias-cardozo-trabajo-final/src/components/SinglePlayer.js"],"names":["React","useState","Player","SinglePlayer","eleccionJugador","setEleccionjugador","ganadasJugador","setGanadasJugador","juegoTerminado","setJuegoTerminado","iconosPosibles","Piedra","Papel","Tijeras","Lagarto","Spock","iconoRandom","setIconoRandom","eleccionesPosibles","eleccionCpu","setEleccionCPU","ganadasCPU","setGanadasCPU","ganadorDeRonda","setGanadorDeRonda","verificarGanador","opcJug1","opcCPU","rta","jugar","valorRandom","Math","floor","random","length","eleccionRandom","ganador","console","log","reset","verEleccion","eleccion"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\n//importo iconos \nimport Piedra from '../icons/piedra.svg'\nimport Papel from '../icons/papel.svg'\nimport Tijeras from '../icons/tijeras.svg'\nimport Lagarto from '../icons/lagarto.svg'\nimport Spock from '../icons/spock.svg'\n\n\nimport Player from '../components/Player'\n\nimport '../styles/SinglePlayer.css'\n\nfunction SinglePlayer(){\n\n    //Jugador\n    const [eleccionJugador, setEleccionjugador]= useState('');\n    const [ganadasJugador, setGanadasJugador]= useState(0);\n    const [juegoTerminado, setJuegoTerminado]= useState(false);\n\n    //CPU\n    const iconosPosibles= [Piedra, Papel, Tijeras, Lagarto, Spock];\n    const [iconoRandom, setIconoRandom]= useState(null);\n    const eleccionesPosibles = ['Piedra', 'Papel', 'Tijera', 'Lagarto', 'Spock'];\n    const [eleccionCpu,setEleccionCPU] = useState('');\n    const [ganadasCPU, setGanadasCPU]= useState(0);\n\n    const [ganadorDeRonda, setGanadorDeRonda]= useState('');\n    \n\n    function verificarGanador(opcJug1 , opcCPU){\n\n        var rta= '';\n\n        //Casos para eleccion 'Piedra' del jugador\n        if(opcJug1 === 'Piedra'){\n            //gana contra:\n            if(opcCPU === 'Tijera' || opcCPU === 'Lagarto'){\n                rta = 'jug1'\n            }\n            //pierde contra:\n            if(opcCPU === 'Papel' || opcCPU === 'Spock'){\n                rta = 'jug2'\n            }\n            if(opcCPU === 'Piedra'){\n                rta = 'empate'\n            }\n            return rta;\n        }\n\n        //Casos para eleccion 'Papel' del jugador\n        if(opcJug1 === 'Papel'){\n            //gana contra:\n            if(opcCPU === 'Piedra' || opcCPU === 'Spock'){\n                rta = 'jug1'\n            }\n            //pierde contra:\n            if(opcCPU === 'Tijera' || opcCPU === 'Lagarto'){\n                rta = 'jug2'\n            }\n            if(opcCPU === 'Papel'){\n                rta = 'empate'\n            }\n            return rta;\n        }\n        //Casos para eleccion 'Tijera' del jugador\n        if(opcJug1 === 'Tijera'){\n            //gana contra:\n            if(opcCPU === 'Papel' || opcCPU === 'Lagarto'){\n                rta = 'jug1'\n            }\n            //pierde contra:\n            if(opcCPU === 'Piedra' || opcCPU === 'Spock'){\n                rta = 'jug2'\n            }\n            if(opcCPU === 'Tijera'){\n                rta = 'empate'\n            }\n            return rta;\n        }\n        //Casos para eleccion 'Lagarto' del jugador\n        if(opcJug1 === 'Lagarto'){\n            //gana contra:\n            if(opcCPU === 'Papel' || opcCPU === 'Spock'){\n                rta = 'jug1'\n            }\n            //pierde contra:\n            if(opcCPU === 'Piedra' || opcCPU === 'Tijera'){\n                rta = 'jug2'\n            }\n            if(opcCPU === 'Lagarto'){\n                rta = 'empate'\n            }\n            return rta;\n        }\n        //Casos para eleccion 'Spock' del jugador\n        if(opcJug1 === 'Spock'){\n            //gana contra:\n            if(opcCPU === 'Tijera' || opcCPU === 'Piedra'){\n                rta = 'jug1'\n            }\n            //pierde contra:\n            if(opcCPU === 'Lagarto' || opcCPU === 'Papel'){\n                rta = 'jug2'\n            }\n            if(opcCPU === 'Spock'){\n                rta = 'empate'\n            }\n            return rta;\n        }\n \n    }\n\n    function jugar(opcJug1){\n        if(!juegoTerminado && opcJug1 !==''){\n            //Seteo una eleccion random para el cpu\n            var valorRandom = Math.floor(Math.random() * eleccionesPosibles.length);\n            var eleccionRandom = eleccionesPosibles[valorRandom];\n            setEleccionCPU(eleccionRandom);\n            setIconoRandom(iconosPosibles[valorRandom])\n            \n            \n            var ganador =verificarGanador(opcJug1, eleccionRandom);\n            if (ganador ==='jug1'){\n                setGanadasJugador(ganadasJugador+1)\n                setGanadorDeRonda('Ganador Jugador 1')\n            }\n            if(ganador==='jug2'){\n                setGanadasCPU(ganadasCPU+1)\n                setGanadorDeRonda('Ganador CPU')\n            }\n            if(ganador === 'empate'){\n                setGanadorDeRonda('Empate')\n            }\n            console.log(ganador)\n            setJuegoTerminado(true)\n        }\n        else{\n            //tirar error\n        }\n        \n    }\n\n    function reset(){\n        setEleccionjugador('');\n        setEleccionCPU('');\n        setJuegoTerminado(false);\n        setGanadorDeRonda('');\n    }\n\n\n    const verEleccion = eleccion =>{\n        if(!juegoTerminado){\n            setEleccionjugador(eleccion)\n        }\n    }\n\n    return(\n        <div>\n            <Player verEleccion={verEleccion}/>\n            <div className=\"datos-jugador\">\n                <h3>Ganadas: {ganadasJugador}</h3>\n                <h2>Elegiste: {eleccionJugador}</h2>\n            </div>\n            <button className=\"boton-jugar\" type=\"button\" onClick={() => jugar(eleccionJugador)}>Jugar</button>\n            <button className=\"boton-jugar\" type=\"button\" onClick={()=>reset()} >Jugar de Nuevo</button>\n            \n            <div className=\"datos-cpu\">\n                <h2>El CPU eligió : <img className=\"iconoSeleccionCpu\" src={iconoRandom} /></h2>\n                <h3>Ganadas CPU: {ganadasCPU}</h3>\n            </div>\n                <h1>Resultado final: {ganadorDeRonda}</h1>\n            \n        </div>\n    )\n}\n\nexport default SinglePlayer;"]},"metadata":{},"sourceType":"module"}